{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\n\nfunction useHttp() {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async (requestConfig, applyData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.Url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n}\n\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Users/hp/Desktop/custom-hook api/src/hooks/useHttp.js"],"names":["useState","useCallback","useHttp","isLoading","setIsLoading","error","setError","sendRequest","requestConfig","applyData","response","fetch","Url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAqC,OAArC;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AAEf,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMO,WAAW,GAAEN,WAAW,CAAE,OAAOO,aAAP,EAAqBC,SAArB,KAAmC;AAC/DL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACA,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAEH,aAAa,CAACI,GAAhB,EAAqB;AAC7CC,QAAAA,MAAM,EAAEL,aAAa,CAACK,MAAd,GAAqBL,aAAa,CAACK,MAAnC,GAA0C,KADL;AAE7CC,QAAAA,OAAO,EAAEN,aAAa,CAACM,OAAd,GAAsBN,aAAa,CAACM,OAApC,GAA4C,EAFR;AAG7CC,QAAAA,IAAI,EAACP,aAAa,CAACO,IAAd,GAAoBC,IAAI,CAACC,SAAL,CAAeT,aAAa,CAACO,IAA7B,CAApB,GAAuD;AAHf,OAArB,CAA5B;;AAOA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACAZ,MAAAA,SAAS,CAACW,IAAD,CAAT;AAGH,KAhBD,CAgBE,OAAOE,GAAP,EAAY;AACVhB,MAAAA,QAAQ,CAACgB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACH;;AACDnB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAvB6B,EAuB5B,EAvB4B,CAA9B;AAyBJ,SAAO;AACHD,IAAAA,SADG;AAEHE,IAAAA,KAFG;AAGHE,IAAAA;AAHG,GAAP;AAKC;;GAnCQL,O;;AAsCT,eAAeA,OAAf","sourcesContent":["import { useState ,useCallback} from 'react'\r\n\r\nfunction useHttp() {\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const sendRequest =useCallback( async (requestConfig,applyData) => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await fetch( requestConfig.Url, {\r\n                method: requestConfig.method?requestConfig.method:'GET',\r\n                headers: requestConfig.headers?requestConfig.headers:{},\r\n                body:requestConfig.body? JSON.stringify(requestConfig.body):null,\r\n            }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Request failed!');\r\n            }\r\n\r\n            const data = await response.json();\r\n            applyData(data)\r\n\r\n\r\n        } catch (err) {\r\n            setError(err.message || 'Something went wrong!');\r\n        }\r\n        setIsLoading(false); \r\n    },[]);\r\n\r\nreturn {\r\n    isLoading,\r\n    error,\r\n    sendRequest,\r\n}\r\n}\r\n\r\n\r\nexport default useHttp\r\n"]},"metadata":{},"sourceType":"module"}